{"version":3,"sources":["components/Keypad.tsx","components/Output.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Keypad","className","name","autoFocus","Component","Output","this","props","result","React","App","state","buttonPressed","buttonName","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAMqBA,G,uLAEd,OACC,yBAAKC,UAAU,cACP,yBAAKA,UAAU,UACX,4BAAQC,KAAK,KAAKD,UAAU,aAA5B,MACA,4BAAQC,KAAK,OAAQD,UAAU,aAA/B,QACA,4BAAQC,KAAK,IAAKD,UAAU,aAA5B,MACA,4BAAQC,KAAK,IAAKD,UAAU,aAA5B,KAAkD,6BAGlD,4BAAQC,KAAK,IAAMD,UAAU,QAA7B,KACA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,aAA3B,KAGA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,cAA3B,KAEA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,aAA3B,KAAiD,6BAGjD,4BAAQC,KAAK,IAAID,UAAU,UAA3B,KACA,4BAAQC,KAAK,IAAID,UAAU,QAA3B,KACA,4BAAQA,UAAU,SAASE,WAAS,EAACD,KAAK,KAA1C,KACA,4BAAQA,KAAK,QAAb,OAAiC,mC,GA/BjBE,cCCfC,E,iLAIb,OAEA,yBAAIC,KAAKC,MAAMC,Y,GANaC,aCFfC,E,2MAGjBC,MAAQ,CACJH,OAAQ,I,EAIdI,cAAe,SAACC,GACd,EAAKC,SAAS,CACZN,OAAQK,K,wEAIZ,OACE,uBAAKZ,UAAU,OAGX,yBACC,gBAAC,EAAD,CAASO,OAAUF,KAAKK,MAAMH,SAC9B,gBAAC,EAAD,Y,GApBwBC,aCObM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6aace7ed.chunk.js","sourcesContent":["\nimport React, { Component } from \"react\";\n\n\n\n\nexport default class Keypad extends Component {\n   render(){\n       return(   \n        <div className=\"calculator\">\n                <div className=\"keypad\">\n                    <button name=\"AC\" className=\"dark-gray\"  >AC</button>\n                    <button name=\"back\"  className=\"dark-gray\">back</button>\n                    <button name=\"%\"  className=\"dark-gray\" > %</button>\n                    <button name=\"/\"  className=\"dark-gray\">/</button><br/>\n    \n    \n                    <button name=\"7\"   className=\"gray\">7</button>\n                    <button name=\"8\" className=\"gray\">8</button>\n                    <button name=\"9\" className=\"gray\" >9</button>\n                    <button name=\"+\" className=\"dark-gray\" >+</button>\n    \n    \n                    <button name=\"4\" className=\"gray\">4</button>\n                    <button name=\"5\" className=\"gray\">5</button>\n                    <button name=\"6\" className=\"gray\" >6</button>\n                    <button name=\"-\" className=\" dark-gray\">-</button>\n    \n                    <button name=\"1\" className=\"gray\" >1</button>\n                    <button name=\"2\" className=\"gray\">2</button>\n                    <button name=\"3\" className=\"gray\">3</button>\n                    <button name=\"*\" className=\"dark-gray\">x</button><br/>\n    \n    \n                    <button name=\".\" className=\"orange\">.</button>\n                    <button name=\"0\" className=\"gray\" >0</button>\n                    <button className=\"orange\" autoFocus name=\"=\" >=</button>\n                    <button name=\"swap\" >sci</button><br/>\n                </div>\n                </div>\n       )\n       }\n    }","import * as React from 'react';\ntype ResultProps = {\n    result: string\n  }\n \n\n\nexport default class Output extends React.Component<ResultProps>{\n   \n\n    public render(){\n        return(\n            \n        <p>{this.props.result}</p>\n\n      \n\n        );\n    }\n\n\n\n}","import * as React from 'react';\nimport './App.css';\nimport Keypad from './components/Keypad';\nimport Output from './components/Output';\n\nexport default class App extends React.Component <{}> {\n  \n\n    state = {\n        result: \"\"\n    }\n\n\n  buttonPressed =(buttonName:string)=>  {\n    this.setState({\n      result: buttonName\n    });\n  };\n public render(){\n  return (\n    <div className=\"App\">\n     \n      \n        <p> \n         <Output  result = {this.state.result}/>\n         <Keypad />\n        \n        </p>\n        \n     \n     \n    </div>\n  );\n}\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}